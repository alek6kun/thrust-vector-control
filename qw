[1mdiff --git a/Deliverable_3_1/Deliverable_3_1.m b/Deliverable_3_1/Deliverable_3_1.m[m
[1mindex e7122d1..980ab54 100644[m
[1m--- a/Deliverable_3_1/Deliverable_3_1.m[m
[1m+++ b/Deliverable_3_1/Deliverable_3_1.m[m
[36m@@ -1,8 +1,8 @@[m
 addpath(fullfile('..', 'src'));[m
 [m
[31m-%close all[m
[31m-%clear all[m
[31m-%clc[m
[32m+[m[32mclose all[m
[32m+[m[32mclear[m
[32m+[m[32mclc[m
 [m
 %% TODO: This file should produce all the plots for the deliverable[m
 [m
[1mdiff --git a/Deliverable_3_2/Deliverable_3_2.m b/Deliverable_3_2/Deliverable_3_2.m[m
[1mindex b16af8c..8ebcbc8 100644[m
[1m--- a/Deliverable_3_2/Deliverable_3_2.m[m
[1m+++ b/Deliverable_3_2/Deliverable_3_2.m[m
[36m@@ -1,10 +1,8 @@[m
 addpath(fullfile('..', 'src'));[m
[31m-[m
[31m-%close all[m
[31m-%clear all[m
[31m-%clc[m
[31m-[m
[31m-%% TODO: This file should produce all the plots for the deliverable[m
[32m+[m[32maddpath(fullfile('..', 'MpcControl/'));[m
[32m+[m[32mclose all[m
[32m+[m[32mclear[m
[32m+[m[32mclc[m
 [m
 %% TODO: This file should produce all the plots for the deliverable[m
 [m
[1mdiff --git a/Deliverable_3_2/MpcControl_roll_bad.m b/Deliverable_3_2/MpcControl_roll_bad.m[m
[1mindex 5132858..b96622e 100644[m
[1m--- a/Deliverable_3_2/MpcControl_roll_bad.m[m
[1m+++ b/Deliverable_3_2/MpcControl_roll_bad.m[m
[36m@@ -1,4 +1,4 @@[m
[31m-classdef MpcControl_roll < MpcControlBase[m
[32m+[m[32mclassdef MpcControl_roll_bad < MpcControlBase[m
     [m
     methods[m
         % Design a YALMIP optimizer object that takes a steady-state state[m
[1mdiff --git a/Deliverable_3_2/MpcControl_x_bad.m b/Deliverable_3_2/MpcControl_x_bad.m[m
[1mindex b100984..8ed655b 100644[m
[1m--- a/Deliverable_3_2/MpcControl_x_bad.m[m
[1m+++ b/Deliverable_3_2/MpcControl_x_bad.m[m
[36m@@ -1,4 +1,4 @@[m
[31m-classdef MpcControl_x < MpcControlBase[m
[32m+[m[32mclassdef MpcControl_x_bad < MpcControlBase[m
     methods[m
         % Design a YALMIP optimizer object that takes a steady-state state[m
         % and input (xs, us) and returns a control input[m
[1mdiff --git a/Deliverable_3_2/MpcControl_y_bad.m b/Deliverable_3_2/MpcControl_y_bad.m[m
[1mindex 62bd74b..0284a4c 100644[m
[1m--- a/Deliverable_3_2/MpcControl_y_bad.m[m
[1m+++ b/Deliverable_3_2/MpcControl_y_bad.m[m
[36m@@ -1,4 +1,4 @@[m
[31m-classdef MpcControl_y < MpcControlBase[m
[32m+[m[32mclassdef MpcControl_y_bad < MpcControlBase[m
     [m
     methods[m
         % Design a YALMIP optimizer object that takes a steady-state state[m
[1mdiff --git a/Deliverable_3_2/MpcControl_z_bad.m b/Deliverable_3_2/MpcControl_z_bad.m[m
[1mindex 8b1367b..30523d0 100644[m
[1m--- a/Deliverable_3_2/MpcControl_z_bad.m[m
[1m+++ b/Deliverable_3_2/MpcControl_z_bad.m[m
[36m@@ -1,4 +1,4 @@[m
[31m-classdef MpcControl_z < MpcControlBase[m
[32m+[m[32mclassdef MpcControl_z_bad < MpcControlBase[m
     properties[m
         A_bar, B_bar, C_bar % Augmented system for disturbance rejection[m
         L                   % Estimator gain for disturbance rejection[m
[1mdiff --git a/Deliverable_4_1/Deliverable_4_1.m b/Deliverable_4_1/Deliverable_4_1.m[m
[1mindex f2832a6..6a02123 100644[m
[1m--- a/Deliverable_4_1/Deliverable_4_1.m[m
[1m+++ b/Deliverable_4_1/Deliverable_4_1.m[m
[36m@@ -1,8 +1,9 @@[m
 %% To Do 4.1[m
 clc[m
[31m-clear all[m
[32m+[m[32mclear[m
 close all[m
 addpath(fullfile('..', 'src'));[m
[32m+[m[32maddpath(fullfile('..', 'MpcControl/'));[m
 [m
 Ts = 1/20;[m
 rocket = Rocket(Ts);[m
[1mdiff --git a/Deliverable_5_1/Deliverable_5_1.m b/Deliverable_5_1/Deliverable_5_1.m[m
[1mindex 17ccb47..65bd611 100644[m
[1m--- a/Deliverable_5_1/Deliverable_5_1.m[m
[1m+++ b/Deliverable_5_1/Deliverable_5_1.m[m
[36m@@ -1,8 +1,8 @@[m
 addpath(fullfile('..', 'src'));[m
[31m-[m
[31m-%close all[m
[31m-%clear all[m
[31m-%clc[m
[32m+[m[32maddpath(fullfile('..', 'MpcControl/'));[m
[32m+[m[32mclose all[m
[32m+[m[32mclear[m
[32m+[m[32mclc[m
 [m
 %% TODO: This file should produce all the plots for the deliverable[m
 [m
[1mdiff --git a/Deliverable_5_2/Deliverable_5_2.m b/Deliverable_5_2/Deliverable_5_2.m[m
[1mindex 0507003..fdfdb31 100644[m
[1m--- a/Deliverable_5_2/Deliverable_5_2.m[m
[1m+++ b/Deliverable_5_2/Deliverable_5_2.m[m
[36m@@ -1,8 +1,8 @@[m
 addpath(fullfile('..', 'src'));[m
[31m-[m
[31m-%close all[m
[31m-%clear all[m
[31m-%clc[m
[32m+[m[32maddpath(fullfile('..', 'MpcControl/'));[m
[32m+[m[32mclose all[m
[32m+[m[32mclear[m
[32m+[m[32mclc[m
 [m
 %% TODO: This file should produce all the plots for the deliverable[m
 [m
[1mdiff --git a/Deliverable_6_1/Deliverable_6_1.m b/Deliverable_6_1/Deliverable_6_1.m[m
[1mindex 38ff394..975108c 100644[m
[1m--- a/Deliverable_6_1/Deliverable_6_1.m[m
[1m+++ b/Deliverable_6_1/Deliverable_6_1.m[m
[36m@@ -1,6 +1,6 @@[m
 addpath(fullfile('..', 'src'));[m
 close all[m
[31m-clear all[m
[32m+[m[32mclear[m
 clc[m
 [m
 %% Intialisations[m
[1mdiff --git a/Deliverable_6_2/Deliverable_6_2.m b/Deliverable_6_2/Deliverable_6_2.m[m
[1mindex 1497ce9..ef3dd2c 100644[m
[1m--- a/Deliverable_6_2/Deliverable_6_2.m[m
[1m+++ b/Deliverable_6_2/Deliverable_6_2.m[m
[36m@@ -1,7 +1,7 @@[m
 addpath(fullfile('..', 'src'));[m
[31m-%close all[m
[31m-%clear all[m
[31m-%clc[m
[32m+[m[32mclose all[m
[32m+[m[32mclear[m
[32m+[m[32mclc[m
 [m
 %% Initialisations[m
 Ts = 1/40; % Higher sampling rate for this part![m
[1mdiff --git a/src/MpcControl_roll.m b/src/MpcControl_roll.m[m
[1mdeleted file mode 100644[m
[1mindex 6dc7410..0000000[m
[1m--- a/src/MpcControl_roll.m[m
[1m+++ /dev/null[m
[36m@@ -1,111 +0,0 @@[m
[31m-classdef MpcControl_roll < MpcControlBase[m
[31m-    [m
[31m-    methods[m
[31m-        % Design a YALMIP optimizer object that takes a steady-state state[m
[31m-        % and input (xs, us) and returns a control input[m
[31m-        function ctrl_opti = setup_controller(mpc, Ts, H)[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   X(:,1)       - initial state (estimate)[m
[31m-            %   x_ref, u_ref - reference state/input[m
[31m-            % OUTPUTS[m
[31m-            %   U(:,1)       - input to apply to the system[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            N_segs = ceil(H/Ts); % Horizon steps[m
[31m-            N = N_segs + 1;      % Last index in 1-based Matlab indexing[m
[31m-            [m
[31m-            [nx, nu] = size(mpc.B);[m
[31m-            [m
[31m-            % Steady-state targets (Ignore this before Todo 3.2)[m
[31m-            x_ref = sdpvar(nx, 1);[m
[31m-            u_ref = sdpvar(nu, 1);[m
[31m-            [m
[31m-            % Predicted state and input trajectories[m
[31m-            X = sdpvar(nx, N);[m
[31m-            U = sdpvar(nu, N-1);[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            [m
[31m-            % NOTE: The matrices mpc.A, mpc.B, mpc.C and mpc.D are[m
[31m-            %       the DISCRETE-TIME MODEL of your system[m
[31m-            [m
[31m-            % SET THE PROBLEM CONSTRAINTS con AND THE OBJECTIVE obj HERE[m
[31m-            obj = 0;[m
[31m-            con = [];[m
[31m-[m
[31m-             %State constraints - not needed? -> no constraints on w_z or[m
[31m-             %gamma[m
[31m-            %Input constraints for roll[m
[31m-            M = [1;-1];[m
[31m-            m = [20; 20];[m
[31m-            %YALMIP[m
[31m-            %Cost matrices [m
[31m-            Q = diag([10,20]); %nx = 2[m
[31m-            R = 0.001*eye(nu); %nu = 1[m
[31m-[m
[31m-            [K,Qf,~] = dlqr(mpc.A,mpc.B,Q,R);[m
[31m-            K = -K; [m
[31m-[m
[31m-            %System dynamics[m
[31m-[m
[31m-            con = (X(:, 2) == mpc.A * X(:, 1) + mpc.B*U(:,1)) + (M*U(:,1)<= m);[m
[31m-            obj = (U(:, 1)-u_ref)' * R * (U(:, 1)-u_ref);[m
[31m-[m
[31m-            for i = 1:N-1[m
[31m-                con = con + (X(:, i+1) == mpc.A * X(:, i) + mpc.B * U(:, i)); %System dynamics[m
[31m-                con = con + (M*U(:,i) <= m); %Input constraints[m
[31m-                obj = obj + (X(:, i)-x_ref)' * Q * (X(:, i)- x_ref) + (U(:, i)- u_ref)' * R * (U(:, i)- u_ref); % Cost function[m
[31m-            end[m
[31m-            obj = obj + (X(:,N)-x_ref)'*Qf*(X(:,N)-x_ref);[m
[31m-            [m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            % Return YALMIP optimizer object[m
[31m-            ctrl_opti = optimizer(con, obj, sdpsettings('solver','gurobi'), ...[m
[31m-                {X(:,1), x_ref, u_ref}, {U(:,1), X, U});[m
[31m-        end[m
[31m-        [m
[31m-        % Design a YALMIP optimizer object that takes a position reference[m
[31m-        % and returns a feasible steady-state state and input (xs, us)[m
[31m-        function target_opti = setup_steady_state_target(mpc)[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   ref    - reference to track[m
[31m-            % OUTPUTS[m
[31m-            %   xs, us - steady-state target[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            % Steady-state targets[m
[31m-            nx = size(mpc.A, 1);[m
[31m-            xs = sdpvar(nx, 1);[m
[31m-            us = sdpvar;[m
[31m-            [m
[31m-            % Reference position (Ignore this before Todo 3.2)[m
[31m-            ref = sdpvar;[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            % You can use the matrices mpc.A, mpc.B, mpc.C and mpc.D[m
[31m-            obj = 0;[m
[31m-            con = [xs == 0, us == 0];[m
[31m-[m
[31m-            M = [1;-1];[m
[31m-            m = [deg2rad(20); deg2rad(20)];[m
[31m-            [m
[31m-            con = [M*us <= m ,...[m
[31m-                    xs == mpc.A*xs + mpc.B*us,...[m
[31m-                    ref == mpc.C*xs + mpc.D];[m
[31m-            [m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            % Compute the steady-state target[m
[31m-            target_opti = optimizer(con, obj, sdpsettings('solver', 'gurobi'), ref, {xs, us});[m
[31m-        end[m
[31m-    end[m
[31m-end[m
[1mdiff --git a/src/MpcControl_x.m b/src/MpcControl_x.m[m
[1mdeleted file mode 100644[m
[1mindex ed379f6..0000000[m
[1m--- a/src/MpcControl_x.m[m
[1m+++ /dev/null[m
[36m@@ -1,87 +0,0 @@[m
[31m-classdef MpcControl_x < MpcControlBase[m
[31m-    methods[m
[31m-        % Design a YALMIP optimizer object that takes a steady-state state[m
[31m-        % and input (xs, us) and returns a control input[m
[31m-        function ctrl_opti = setup_controller(mpc, Ts, H)[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   X(:,1)       - initial state (estimate)[m
[31m-            %   x_ref, u_ref - reference state/input[m
[31m-            % OUTPUTS[m
[31m-            %   U(:,1)       - input to apply to the system[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            N_segs = ceil(H/Ts); % Horizon steps[m
[31m-            N = N_segs + 1;      % Last index in 1-based Matlab indexing[m
[31m-[m
[31m-            [nx, nu] = size(mpc.B);[m
[31m-[m
[31m-            % Targets (Ignore this before Todo 3.2)[m
[31m-            x_ref = sdpvar(nx, 1);[m
[31m-            u_ref = sdpvar(nu, 1);[m
[31m-[m
[31m-            % Predicted state and input trajectories[m
[31m-            X = sdpvar(nx, N, 'full');[m
[31m-            U = sdpvar(nu, N-1, 'full');[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            % Define angle constraints[m
[31m-            beta_max = deg2rad(10);[m
[31m-            max_B_dif = deg2rad(5);[m
[31m-            % Define the weight matrices[m
[31m-            Q = 30*eye(nx);[m
[31m-            R = 0.5*eye(nu); [m
[31m-            M = [1;-1];[m
[31m-            m = [max_B_dif; max_B_dif];[m
[31m-[m
[31m-                       % Compute LQR controller for unconstrained system[m
[31m-            F = [0 1 0 0; 0 -1 0 0];[m
[31m-            f = [beta_max; beta_max];[m
[31m-            [K,Qf,~] = dlqr(mpc.A,mpc.B,Q,R);[m
[31m-            K = -K; [m
[31m-[m
[31m-            obj = (U(:, 1)-u_ref)' * R * (U(:, 1)-u_ref);[m
[31m-            con = (X(:,2) == mpc.A*X(:,1) + mpc.B*U(:,1)) + (F*X(:,1) <= f)+ (M*U(:,1)<=m);[m
[31m-            for k = 2:N-1[m
[31m-                obj = obj + (X(:, k)-x_ref)' * Q * (X(:, k)- x_ref) + (U(:, k)- u_ref)' * R * (U(:, k)- u_ref);[m
[31m-                con = con + (X(:,k+1) == mpc.A*X(:,k) + mpc.B*U(:,k)) + (F*X(:,k)<= f) + (M*U(:,k)<=m);[m
[31m-            end[m
[31m-            obj = obj + (X(:,N)-x_ref)'*Qf*(X(:,N)-x_ref);[m
[31m-            % Return YALMIP optimizer object[m
[31m-            ctrl_opti = optimizer(con, obj, sdpsettings('solver','gurobi'), ...[m
[31m-                {X(:,1), x_ref, u_ref}, {U(:,1), X, U});[m
[31m-        end[m
[31m-        % Design a YALMIP optimizer object that takes a position reference[m
[31m-        % and returns a feasible steady-state state and input (xs, us)[m
[31m-        function target_opti = setup_steady_state_target(mpc)[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   ref    - reference to track[m
[31m-            % OUTPUTS[m
[31m-            %   xs, us - steady-state target[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            nx = size(mpc.A, 1);[m
[31m-            % Steady-state targets[m
[31m-            xs = sdpvar(nx, 1, 'full');[m
[31m-            us = sdpvar;[m
[31m-            % Reference position (Ignore this before Todo 3.2)[m
[31m-            ref = sdpvar;[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            % You can use the matrices mpc.A, mpc.B, mpc.C and mpc.D[m
[31m-            obj = 0;[m
[31m-            con = [xs == 0, us == 0];[m
[31m-[m
[31m-            M = [1;-1];[m
[31m-            m = [deg2rad(5); deg2rad(5)];[m
[31m-            [m
[31m-            con = [M*us <= m ,...[m
[31m-                    xs == mpc.A*xs + mpc.B*us,...[m
[31m-                    ref == mpc.C*xs + mpc.D];[m
[31m-            [m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % Compute the steady-state target[m
[31m-            target_opti = optimizer(con, obj, sdpsettings('solver', 'gurobi'), ref, {xs, us});[m
[31m-        end[m
[31m-    end[m
[31m-end[m
\ No newline at end of file[m
[1mdiff --git a/src/MpcControl_y.m b/src/MpcControl_y.m[m
[1mdeleted file mode 100644[m
[1mindex 62bd74b..0000000[m
[1m--- a/src/MpcControl_y.m[m
[1m+++ /dev/null[m
[36m@@ -1,88 +0,0 @@[m
[31m-classdef MpcControl_y < MpcControlBase[m
[31m-    [m
[31m-    methods[m
[31m-        % Design a YALMIP optimizer object that takes a steady-state state[m
[31m-        % and input (xs, us) and returns a control input[m
[31m-        function ctrl_opti = setup_controller(mpc, Ts, H)[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   X(:,1)       - initial state (estimate)[m
[31m-            %   x_ref, u_ref - reference state/input[m
[31m-            % OUTPUTS[m
[31m-            %   U(:,1)       - input to apply to the system[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            N_segs = ceil(H/Ts); % Horizon steps[m
[31m-            N = N_segs + 1;      % Last index in 1-based Matlab indexing[m
[31m-[m
[31m-            [nx, nu] = size(mpc.B);[m
[31m-            [m
[31m-            % Targets (Ignore this before Todo 3.2)[m
[31m-            x_ref = sdpvar(nx, 1);[m
[31m-            u_ref = sdpvar(nu, 1);[m
[31m-            [m
[31m-            % Predicted state and input trajectories[m
[31m-            X = sdpvar(nx, N, 'full');[m
[31m-            U = sdpvar(nu, N-1, 'full');[m
[31m-            Q = 30*eye(nx);[m
[31m-            R = 0.5*eye(nu);[m
[31m-            alpha_max = deg2rad(10);[m
[31m-            alpha_dif_max = deg2rad(5);[m
[31m-            M = [1;-1];[m
[31m-            m = [alpha_dif_max; alpha_dif_max];[m
[31m-[m
[31m-            % Compute LQR controller for unconstrained system[m
[31m-            F = [0 1 0 0; 0 -1 0 0];[m
[31m-            f = [alpha_max; alpha_max];[m
[31m-            [K,Qf,~] = dlqr(mpc.A,mpc.B,Q,R);[m
[31m-            K = -K; [m
[31m-[m
[31m-            obj = (U(:, 1)-u_ref)' * R * (U(:, 1)-u_ref);[m
[31m-            con = (X(:,2) == mpc.A*X(:,1) + mpc.B*U(:,1)) + (F*X(:,1) <= f)+ (M*U(:,1)<=m);[m
[31m-            for k = 1:N-1[m
[31m-                obj = obj + (X(:, k)-x_ref)' * Q * (X(:, k)- x_ref) + (U(:, k)- u_ref)' * R * (U(:, k)- u_ref);[m
[31m-                con = con + (X(:,k+1) == mpc.A*X(:,k) + mpc.B*U(:,k)) + (F*X(:,k)<= f) + (M*U(:,k)<=m);[m
[31m-            end[m
[31m-            obj = obj + (X(:,N)-x_ref)'*Qf*(X(:,N)-x_ref);[m
[31m-[m
[31m-            ctrl_opti = optimizer(con, obj, sdpsettings('solver','gurobi'), ...[m
[31m-                {X(:,1), x_ref, u_ref}, {U(:,1), X, U});[m
[31m-        end[m
[31m-        [m
[31m-        % Design a YALMIP optimizer object that takes a position reference[m
[31m-        % and returns a feasible steady-state state and input (xs, us)[m
[31m-        function target_opti = setup_steady_state_target(mpc)[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   ref    - reference to track[m
[31m-            % OUTPUTS[m
[31m-            %   xs, us - steady-state target[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            nx = size(mpc.A, 1);[m
[31m-[m
[31m-            % Steady-state targets[m
[31m-            xs = sdpvar(nx, 1, 'full');[m
[31m-            us = sdpvar;[m
[31m-            [m
[31m-            % Reference position (Ignore this before Todo 3.2)[m
[31m-            ref = sdpvar;[m
[31m-            [m
[31m-            obj = 0;[m
[31m-            con = [xs == 0, us == 0];[m
[31m-[m
[31m-            M = [1;-1];[m
[31m-            m = [deg2rad(5); deg2rad(5)];[m
[31m-            [m
[31m-            con = [M*us <= m ,...[m
[31m-                    xs == mpc.A*xs + mpc.B*us,...[m
[31m-                    ref == mpc.C*xs + mpc.D];[m
[31m-            [m
[31m-            [m
[31m-            % Compute the steady-state target[m
[31m-            target_opti = optimizer(con, obj, sdpsettings('solver', 'gurobi'), ref, {xs, us});[m
[31m-        end[m
[31m-    end[m
[31m-end[m
[1mdiff --git a/src/MpcControl_z.m b/src/MpcControl_z.m[m
[1mdeleted file mode 100644[m
[1mindex 4e751a6..0000000[m
[1m--- a/src/MpcControl_z.m[m
[1m+++ /dev/null[m
[36m@@ -1,167 +0,0 @@[m
[31m-classdef MpcControl_z < MpcControlBase[m
[31m-    properties[m
[31m-        A_bar, B_bar, C_bar % Augmented system for disturbance rejection[m
[31m-        L                   % Estimator gain for disturbance rejection[m
[31m-    end[m
[31m-    [m
[31m-    methods[m
[31m-        function mpc = MpcControl_z(sys, Ts, H)[m
[31m-            mpc = mpc@MpcControlBase(sys, Ts, H);[m
[31m-            [m
[31m-            [mpc.A_bar, mpc.B_bar, mpc.C_bar, mpc.L] = mpc.setup_estimator();[m
[31m-        end[m
[31m-        [m
[31m-        % Design a YALMIP optimizer object that takes a steady-state state[m
[31m-        % and input (xs, us) and returns a control input[m
[31m-        function ctrl_opti = setup_controller(mpc, Ts, H)[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   X(:,1)       - initial state (estimate)[m
[31m-            %   d_est        - disturbance estimate[m
[31m-            %   x_ref, u_ref - reference state/input[m
[31m-            % OUTPUTS[m
[31m-            %   U(:,1)       - input to apply to the system[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            N_segs = ceil(H/Ts); % Horizon steps[m
[31m-            N = N_segs + 1;      % Last index in 1-based Matlab indexing[m
[31m-            [m
[31m-            [nx, nu] = size(mpc.B);[m
[31m-            [m
[31m-            % Targets (Ignore this before Todo 3.3)[m
[31m-            x_ref = sdpvar(nx, 1);[m
[31m-            u_ref = sdpvar(nu, 1);[m
[31m-            [m
[31m-            % Disturbance estimate (Ignore this before Part 5)[m
[31m-            d_est = sdpvar(1);[m
[31m-            [m
[31m-            % Predicted state and input trajectories[m
[31m-            X = sdpvar(nx, N,'full');[m
[31m-            U = sdpvar(nu, N-1,'full');[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            [m
[31m-            % NOTE: The matrices mpc.A, mpc.B, mpc.C and mpc.D are[m
[31m-            %       the DISCRETE-TIME MODEL of your system[m
[31m-            [m
[31m-            % SET THE PROBLEM CONSTRAINTS con AND THE OBJECTIVE obj HERE[m
[31m-            obj = 0;[m
[31m-            con = [];[m
[31m-[m
[31m-            %YALMIP[m
[31m-            %Cost matrices [m
[31m-            %Q = 500*eye(nx); [m
[31m-            %R = 0.2*eye(nu);  [m
[31m-            Q = 1*eye(nx); Q(1,1) = 25; Q(2,2) = 35;[m
[31m-            R = 1.5*eye(nu); [m
[31m-[m
[31m-            %State constraints - not needed? -> altitude = 0?[m
[31m-            %Input constraints for Pavg[m
[31m-            M = [1;-1];[m
[31m-            m = [23.3333; 6.6667];[m
[31m-[m
[31m-            % LQR controller for unconstrained system[m
[31m-            [~,P,~] = dlqr(mpc.A,mpc.B,Q,R);[m
[31m-            %K = -K; [m
[31m-            %ENLEVER?[m
[31m-[m
[31m-            %P = dlyap(mpc.A,Q);[m
[31m-[m
[31m-            %System dynamics[m
[31m-            con = (X(:, 2) == mpc.A * X(:, 1) + mpc.B*U(:,1)+ mpc.B*d_est) + (M*U(:,1)<= m); %d_est ici?[m
[31m-            obj = (U(:, 1)-u_ref)' * R * (U(:, 1)-u_ref);[m
[31m-            for i = 1:N-1[m
[31m-                con = con + (X(:, i+1) == mpc.A * X(:, i) + mpc.B * U(:, i) + mpc.B*d_est); %System dynamics[m
[31m-                con = con + (M*U(:,i) <= m); %Input constraints[m
[31m-                obj = obj + (X(:, i)-x_ref)' * Q * (X(:, i)- x_ref) + (U(:, i)- u_ref)' * R * (U(:, i)- u_ref); % Cost function[m
[31m-            end[m
[31m-            obj = obj + (X(:,N)-x_ref)'*P*(X(:,N)-x_ref);[m
[31m-[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            % Return YALMIP optimizer object[m
[31m-            ctrl_opti = optimizer(con, obj, sdpsettings('solver','gurobi'), ...[m
[31m-                {X(:,1), x_ref, u_ref, d_est}, {U(:,1), X, U});[m
[31m-        end[m
[31m-        [m
[31m-        [m
[31m-        % Design a YALMIP optimizer object that takes a position reference[m
[31m-        % and returns a feasible steady-state state and input (xs, us)[m
[31m-        function target_opti = setup_steady_state_target(mpc)[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % INPUTS[m
[31m-            %   ref    - reference to track[m
[31m-            %   d_est  - disturbance estimate[m
[31m-            % OUTPUTS[m
[31m-            %   xs, us - steady-state target[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            nx = size(mpc.A, 1);[m
[31m-            [m
[31m-            % Steady-state targets[m
[31m-            xs = sdpvar(nx, 1);[m
[31m-            us = sdpvar;[m
[31m-            [m
[31m-            % Reference position (Ignore this before Todo 3.3)[m
[31m-            ref = sdpvar;[m
[31m-            [m
[31m-            % Disturbance estimate (Ignore this before Part 5)[m
[31m-            d_est = sdpvar;[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            % You can use the matrices mpc.A, mpc.B, mpc.C and mpc.D[m
[31m-            obj = 0;[m
[31m-            con = [xs == 0, us == 0];[m
[31m-            [m
[31m-            %Following exercice 4, seen in class[m
[31m-[m
[31m-            M = [1;-1];[m
[31m-            m = [23.3333; 6.6667];[m
[31m-            [m
[31m-            con = [M*us <= m ,...[m
[31m-                    xs == mpc.A*xs + mpc.B*(us+d_est),...[m
[31m-                    ref == mpc.C*xs + mpc.D*d_est];[m
[31m-            %DANS THEORIE???[m
[31m-            [m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            [m
[31m-            % Compute the steady-state target[m
[31m-            target_opti = optimizer(con, obj, sdpsettings('solver', 'gurobi'), {ref, d_est}, {xs, us});[m
[31m-        end[m
[31m-        [m
[31m-        [m
[31m-        % Compute augmented system and estimator gain for input disturbance rejection[m
[31m-        function [A_bar, B_bar, C_bar, L] = setup_estimator(mpc)[m
[31m-            [m
[31m-            %%% Design the matrices A_bar, B_bar, L, and C_bar[m
[31m-            %%% so that the estimate x_bar_next [ x_hat; disturbance_hat ][m
[31m-            %%% converges to the correct state and constant input disturbance[m
[31m-            %%%   x_bar_next = A_bar * x_bar + B_bar * u + L * (C_bar * x_bar - y);[m
[31m-            [m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            % You can use the matrices mpc.A, mpc.B, mpc.C and mpc.D[m
[31m-            [nx, nu] = size(mpc.B);[m
[31m-            A_bar = [];[m
[31m-            B_bar = [];[m
[31m-            C_bar = [];[m
[31m-            L = [];[m
[31m-            %%%%REVOIR! [m
[31m-            %%Bd = B because Ax + Bu + Bd[m
[31m-            A_bar = [mpc.A, mpc.B; zeros(1,nx),ones(1)]; %dist E 1xnSteps[m
[31m-            B_bar = [mpc.B;zeros(1,nu)];[m
[31m-            C_bar = [mpc.C,zeros(size(mpc.C,1),1)]; %no C_d because no d_k in correction term[m
[31m-            L = -place(A_bar',C_bar',[0.3,0.4,0.5])'; %0.5,0.6,0.7 are the poles[m
[31m-            %L = -place(A_bar',C_bar',[-0.05,0,-0.05])';[m
[31m-            %higher poles -> more damping and faster convergence[m
[31m-            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE[m
[31m-            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[m
[31m-        end[m
[31m-    end[m
[31m-end[m
