addpath(fullfile('C:\Cours\MPC\Project\mpc-rocket-project-master-rocket_project\rocket_project', 'src'));

close all
clear all
clc


Ts = 1/20; % Sample time
rocket = Rocket(Ts);
[xs, us] = rocket.trim();
sys = rocket.linearize(xs, us);
[sys_x, sys_y, sys_z, sys_roll] = rocket.decompose(sys, xs, us);
% Design MPC controller
H = 7; % Horizon length in seconds
mpc_x = MpcControl_x(sys_x, Ts, H);
% Get control input ( x is the index of the subsystem here)
x_x = [0,0,0,3].';
u_x = mpc_x.get_u(x_x)

% Evaluate once and plot optimal openâˆ’loop trajectory,
% pad last input to get consistent size with time and state
[u, T_opt, X_opt, U_opt] = mpc_x.get_u(x_x);
U_opt(:,end+1) = NaN;
% Account for linearization point
%X_opt = 0;
%U_opt = 0;
ph = rocket.plotvis_sub(T_opt, X_opt, U_opt, sys_x, xs, us); % Plot as usual

%[T, X_sub, U_sub] = rocket.simulate_f(sys_x, x_x, 5, @mpc_x.get_u, 0);
%ph = rocket.plotvis_sub(T, X_sub, U_sub, sys_x, xs, us);
